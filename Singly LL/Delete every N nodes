Given a linked list and two integers M and N. Traverse the linked list such that you retain M nodes then delete next N nodes, continue the same until end of the linked list. That is, in the given linked list you need to delete N nodes after every M nodes.
Input format :

Line 1 : Linked list elements (separated by space and terminated by -1)

Line 2 : M

Line 3 : N

Sample Input 1 :
1 2 3 4 5 6 7 8 -1
2
2
Sample Output 1 :
1 2 5 6






// Following is the node structure
/**************
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};
***************/

node* skipMdeleteN(node  *head, int M, int N) {
    // Write your code here
    if(head==NULL)
        return head;
    if(N==0 || M==0)
        return NULL;
    

    node *currentNode=head;
node *temp=NULL; //TEMP WILL KEEP A COPY OF CURRENTnODE AS WE Modify the list
while(currentNode !=NULL)
{
int take=0;
int skip=0;
while(currentNode !=NULL && take<M)
{
if (temp==NULL)
{
temp = currentNode;
}
else {
temp->next= currentNode;
temp= currentNode;
}
currentNode = currentNode->next;
take++;
}
while(currentNode !=NULL && skip <N)
{
node *newNode = currentNode;
delete currentNode;
currentNode=newNode->next;
skip++;
}
}
if(temp!=NULL)
{
temp->next =NULL;
}
return head;
}

    
    
    
    
    
    
    
    
    
    
    
    
    /* node *temp=head;
    
    while(temp->next!=NULL && (N!=0 && M!=0))
    {
        int i=1,j=1;
       while(i!=M)
       {
           temp=temp->next;
           i++;
       }
        node *temp1=temp;
        while(j<=N)
        {
          //  temp=head;
            temp=temp->next;
            j++;
        }
        temp1->next=temp->next;
        temp=temp->next;
        //head=temp->next;
    }
    
    return head;

}
*/
