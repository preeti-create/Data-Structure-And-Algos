Consider a binary matrix A of size N X N.
Now, consider the following matrices :
A90 - obtained by rotating A clockwise by 90 degrees.
A180 - obtained by rotating A clockwise by 180 degrees.
A270 - obtained by rotating A clockwise by 270 degrees.

Note : Binary matrix implies that every element will be either 0 or 1.

Your task is to construct another binary matrix B of size N X N such that :
B(i,j) = 1 iff either A(i,j) = 1 OR A90(i,j) = 1 OR A180(i,j) = 1 OR A270(i,j) = 1
B(i,j) = 0 otherwise


INPUT

First line contains the size of the matrix N (1 ≤ N ≤ 100)
Next N lines contain N integers each (Only 0 or 1) denoting the matrix A


OUTPUT

Print N X N integers, denoting the matrix B.

Sample Input 0

4
0 0 0 0
0 0 0 0
0 0 1 0
1 0 0 0
Sample Output 0

1 0 0 1
0 1 1 0
0 1 1 0
1 0 0 1














#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    int n;
    cin>>n;
    int arr[n][n];
    int B[n][n];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
        cin>>arr[i][j];
        }
    }
    
     for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
        if(arr[i][j]==1 || arr[n-j-1][i]==1 || arr[n-i-1][n-j-1]==1 || arr[j][n-i-1]==1 )
        {
            B[i][j]=1;
        }
            else
                B[i][j]=0;
            
        }
    }
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
        cout<<B[i][j]<<" ";
        }
        cout<<endl;
    }
    
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}
