
int countWaysToMakeChange(int *denominations, int m, int n)
{
    int i, j, x, y;
    int table[n + 1][m];
    for (i = 0; i < m; i++)
    {
    	table[0][i] = 1;
    }
    for (i = 1; i < n + 1; i++)
    {
        for (j = 0; j < m; j++)
        {

            x = (i - denominations[j] >= 0) ? table[i - denominations[j]][j] : 0;

            y = (j >= 1) ? table[i][j - 1] : 0;
            // total count
            table[i][j] = x + y;
        }
    }
    return table[n][m - 1];
}

// int countWaysToMakeChange(int a[],int n,int value){
//     if(n==0)return 0;
//     if(value==a[0])return 1;
//     if(value>a[0]){
//         int k2=countWaysToMakeChange(a+1,n-1,value);
//         int k3=countWaysToMakeChange(a,n,value-a[0]);
//         return k2+k3;
//     }
//     return 0;
// }










// Appro - 3 Using dp

int countWaysToMakeChange(int d[], int n, int v){

  /*  Don't write main().
   *  Don't read input, it is passed as function argument.
   *  Return output and don't print it.
   *  Taking input and printing output is handled automatically.
   */
  int **ans=new int*[n+1];
    for(int i=0;i<=n;i++)
        ans[i]=new int[v+1];
        
   for(int i=0;i<=n;i++)
   {
       ans[i][0]=1;
   }
    for(int j=1;j<=v;j++)
   {
       ans[0][j]=0;
   }
    for(int i=1;i<=n;i++)
   {
        for(int j=1;j<=v;j++)
        {
            if(d[i-1]>j)
                ans[i][j]=ans[i-1][j];
            else
                ans[i][j]=ans[i-1][j]+ans[i][j-d[i-1]];
        }
   }
    return ans[n][v];
    
    
}

