Gary has two string S and V. Now, Gary wants to know the length shortest subsequence in S, which is not a subsequence in V.
Note: The input data will be such that there will always be a solution.
Input Format :
The first line of input contains a string, that denotes the value of S. The following line contains a string, that denotes the value of V.
Output Format :
Length of shortest subsequence in S such that it is not a subsequence in V
Constraints:
1 <= N <= 1000
1 <= M <= 1000 
Time Limit: 1 second
Sample Input 1:
babab
babba
Sample Output 1:
3
Explanation:
"aab" is the shortest subsequence which is present in S and absent in V.



#include <string>
int solve(string s, string v) {
    // Write your code here
    //if(s.size()==0 || v.size()==0)
        //return 0;
    int m=s.size();
    int n=v.size();
    
    int **dp= new int*[m+1];
    
    for(int i=0;i<=m;i++){
        dp[i]=new int[n+1];
    }
    for(int i=0;i<=m;i++){
        dp[i][0]=1;
    }
    
    for(int i=0;i<=n;i++)
    {
        dp[0][i]=1005;
    }
    
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++)
        {
            int k;
            for( k=j-1;k>=0;k--){
                if(v[k]==s[i-1])
                    break;
            }
            if(k==-1){
                dp[i][j]=1;
            }
            else{
                int ans1=1+dp[i-1][k];
                int ans2=dp[i-1][j];
                dp[i][j]=min(ans1,ans2);
            }
        }
    }
    
    return dp[m][n];

}
    
   /* int x = solve(s+1 , v);
    int index=0;
    
    for(int i=0;i<v.size();i++)
    {
       if(v[i]==s[0])
           index=i;
    }
    
    int y= solve(s+1 , v+index+1);
    
    return min(x,y);
}
*/


 //  Approach- 2 Brute- Force
 
 #define MAX 1005
int solve(string s, string v) {
    // Write your code here
    if(s.size()==0)
    {
        return MAX;
    }
    if( v.size()<=0)
        return 1;
    
    int x = solve(s.substr(1) , v);
    int i=0;
    for( i=0;i<v.size();i++)
    {
       if(v[i]==s[0])
       { 
        break;
       }
    }
    if(i==v.size())
    {
        return 1;
    }
    
    int y=1+solve(s.substr(1) , v.substr(i+1));
    return min(x,y);

}
    
    
