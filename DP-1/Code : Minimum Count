Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.
Input format :
The first and the only line of input contains an integer value, 'N'.
 Output format :
Print the minimum count of numbers required.
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1)

B) (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1) + (1^1)  + (2 ^ 2)

C) (1^1) + (1^1) + (1^1) + (1^1) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1









//DP

#include<climits>
int minCount(int n)
{
	//Write your code here
    int arr[n+1];
    for(int i = 0;i<=n;i++){
        arr[i] = INT_MAX;
    }
    arr[0] = 0;
    arr[1] = 1;
    for(int i = 2;i<=n;i++){
        for(int j = 1;j*j<=i;j++){
            if(arr[i] > arr[i-j*j]+1)
            arr[i] = arr[i-j*j]+1;
        }
    }
    return arr[n];
 }


Appro- 2(Brute force)

#include<algorithm>
#include<math.h>
int minCount(int n)
{
	//Write your code here
    
     int sum=INT_MAX;
    
    if(n<=3)
        return n;
   
    for(int i=1; i<=sqrt(n); i++)
    {
        sum = min(sum , minCount(n- (i*i))+1);  
    }
    
    return sum;
    
}
