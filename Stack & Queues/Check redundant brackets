Check redundant brackets
Send Feedback
For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.
A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.
Example:
Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.

Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.
Note:
You will not get a partial score for this problem. You will get marks only if all the test cases are passed.
Input Format :
The first and the only line of input contains a string expression, without any spaces in between.
Output Format :
The first and the only line of output will print either 'true' or 'false'(without the quotes) denoting whether the input expression contains redundant brackets or not.
Note:
You are not required to print the expected result. It has already been taken care of.
Constraints:
0 <= N <= 10^6
Where N is the length of the expression.

Time Limit: 1 second
Sample Input 1:
a+(b)+c 
Sample Output 1:
true
Explanation:
The expression can be reduced to a+b+c. Hence, the brackets are redundant.
Sample Input 2:
(a+b)
Sample Output 2:
false



















#include<stack>
stack<char> st;
bool checkRedundantBrackets(string expression) {
    
    for(int i=0; i< expression.size() ;i++)
    {
        int c=0;
        if(expression[i] != ')')
        {
            st.push(expression[i]);
            //c++;
        }
      
    if(expression[i]==')')
    {
        if(st.empty() )
            return true;
        
    
        while(st.top()!='(')
        {
            //if(c==0)
               // return true;
            st.pop();
            c++;
            
        }
        
           if(c<=1)
        {
            return true;
        }
        
        
        
        if(st.top()=='(')
        {
        st.pop();
          c=0;
        }
    }
        
        
    }
    
    return false;
	// Write your code here
}


/*#include<stack>
stack<char> st;
bool checkRedundantBrackets(string str) {
    
    for(int i=0; i < str.length() ;i++)
    {
        
        if(str[i] != ')') {
            st.push(str[i]);
        } else {
//              if stack is empty then simply return true
            if(st.empty()) return true;
            
            int count = 0;
            while(st.top() != '(') {
                count++;
                st.pop();
            }
//             Now stack's top element is '(', so we have to pop it also
            st.pop();
//              Now check if our count is less than or eqaul to 1(that means brackets are redundant)
            if(count <= 1) return true;
        }

    }
    
    return false;
	// Write your code here
}

        
//         int c=0;
//         if(expression[i]!='(' && expression[i]!=')')
//         {
//             st.push(expression[i]);
//             c++;
//         }
//         if(expression[i]=='(')
//         {
//             st.push(expression[i]);
//         }
        
//     if(expression[i]==')')
//     {
//         while(st.top()!='(')
//         {
//             if(c==0)
//                 return true;
//             st.pop();
//         }
        
        
//     }
        
        */
